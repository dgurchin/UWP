#pragma checksum "D:\Delivery\src\Inventory.App\Views\Dishes\List\DishesList.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "FBF39D304B445677F3B629648F8C735F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Views
{
    partial class DishesList : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Controls_DataGrid_ItemsSource(global::Inventory.Controls.DataGrid obj, global::System.Collections.IEnumerable value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Collections.IEnumerable) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Collections.IEnumerable), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Inventory_Controls_DataGrid_SelectedItem(global::Inventory.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Inventory_Controls_DataGrid_IsMultipleSelection(global::Inventory.Controls.DataGrid obj, global::System.Boolean value)
            {
                obj.IsMultipleSelection = value;
            }
            public static void Set_Inventory_Controls_DataGrid_ItemsCount(global::Inventory.Controls.DataGrid obj, global::System.Int32 value)
            {
                obj.ItemsCount = value;
            }
            public static void Set_Inventory_Controls_DataGrid_NewCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.NewCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_RefreshCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.RefreshCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_QuerySubmittedCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.QuerySubmittedCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_Query(global::Inventory.Controls.DataGrid obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Query = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_DataGrid_StartSelectionCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.StartSelectionCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_CancelSelectionCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelSelectionCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_SelectItemsCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.SelectItemsCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_DeselectItemsCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeselectItemsCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_SelectRangesCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.SelectRangesCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_ItemInvokedCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.ItemInvokedCommand = value;
            }
            public static void Set_Inventory_Controls_DataGrid_DeleteCommand(global::Inventory.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeleteCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DishesList_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDishesList_Bindings
        {
            private global::Inventory.Models.DishModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj2;
            private global::Windows.UI.Xaml.Controls.TextBlock obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;
            private global::Windows.UI.Xaml.Controls.Image obj6;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3TextDisabled = false;
            private static bool isobj4TextDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj6SourceDisabled = false;

            private DishesList_obj2_BindingsTracking bindingsTracking;

            public DishesList_obj2_Bindings()
            {
                this.bindingsTracking = new DishesList_obj2_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 24 && columnNumber == 36)
                {
                    isobj3TextDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 36)
                {
                    isobj4TextDisabled = true;
                }
                else if (lineNumber == 26 && columnNumber == 36)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 19 && columnNumber == 28)
                {
                    isobj6SourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\Dishes\List\DishesList.xaml line 13
                        this.obj2 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 3: // Views\Dishes\List\DishesList.xaml line 24
                        this.obj3 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 4: // Views\Dishes\List\DishesList.xaml line 25
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 5: // Views\Dishes\List\DishesList.xaml line 26
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 6: // Views\Dishes\List\DishesList.xaml line 19
                        this.obj6 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj2.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Inventory.Models.DishModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IDishesList_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Models.DishModel)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Models.DishModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_MenuFolder(obj.MenuFolder, phase);
                        this.Update_Price(obj.Price, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ThumbnailSource(obj.ThumbnailSource, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 24
                    if (!isobj3TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj3, obj, null);
                    }
                }
            }
            private void Update_MenuFolder(global::Inventory.Models.MenuFolderModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_MenuFolder_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_MenuFolder_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 25
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                }
            }
            private void Update_Price(global::System.Decimal obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 26
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj.ToString(), null);
                    }
                }
            }
            private void Update_ThumbnailSource(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 19
                    if (!isobj6SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj6, (global::Windows.UI.Xaml.Media.ImageSource)this.LookupConverter("ObjectToImageConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.ImageSource), null, null), null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DishesList_obj2_BindingsTracking
            {
                private global::System.WeakReference<DishesList_obj2_Bindings> weakRefToBindingObj; 

                public DishesList_obj2_BindingsTracking(DishesList_obj2_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DishesList_obj2_Bindings>(obj);
                }

                public DishesList_obj2_Bindings TryGetBindingObject()
                {
                    DishesList_obj2_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DishesList_obj2_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Models.DishModel obj = sender as global::Inventory.Models.DishModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ThumbnailSource(obj.ThumbnailSource, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ThumbnailSource":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ThumbnailSource(obj.ThumbnailSource, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Inventory.Models.DishModel obj)
                {
                    DishesList_obj2_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DishesList_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDishesList_Bindings
        {
            private global::Inventory.Views.DishesList dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Inventory.Controls.DataGrid obj7;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj7ItemsSourceDisabled = false;
            private static bool isobj7SelectedItemDisabled = false;
            private static bool isobj7IsMultipleSelectionDisabled = false;
            private static bool isobj7ItemsCountDisabled = false;
            private static bool isobj7NewCommandDisabled = false;
            private static bool isobj7RefreshCommandDisabled = false;
            private static bool isobj7QueryDisabled = false;
            private static bool isobj7QuerySubmittedCommandDisabled = false;
            private static bool isobj7StartSelectionCommandDisabled = false;
            private static bool isobj7CancelSelectionCommandDisabled = false;
            private static bool isobj7SelectItemsCommandDisabled = false;
            private static bool isobj7DeselectItemsCommandDisabled = false;
            private static bool isobj7SelectRangesCommandDisabled = false;
            private static bool isobj7ItemInvokedCommandDisabled = false;
            private static bool isobj7DeleteCommandDisabled = false;

            private DishesList_obj1_BindingsTracking bindingsTracking;

            public DishesList_obj1_Bindings()
            {
                this.bindingsTracking = new DishesList_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 38 && columnNumber == 28)
                {
                    isobj7ItemsSourceDisabled = true;
                }
                else if (lineNumber == 40 && columnNumber == 24)
                {
                    isobj7SelectedItemDisabled = true;
                }
                else if (lineNumber == 42 && columnNumber == 24)
                {
                    isobj7IsMultipleSelectionDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 24)
                {
                    isobj7ItemsCountDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 24)
                {
                    isobj7NewCommandDisabled = true;
                }
                else if (lineNumber == 45 && columnNumber == 24)
                {
                    isobj7RefreshCommandDisabled = true;
                }
                else if (lineNumber == 46 && columnNumber == 24)
                {
                    isobj7QueryDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 24)
                {
                    isobj7QuerySubmittedCommandDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 24)
                {
                    isobj7StartSelectionCommandDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 24)
                {
                    isobj7CancelSelectionCommandDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 24)
                {
                    isobj7SelectItemsCommandDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 24)
                {
                    isobj7DeselectItemsCommandDisabled = true;
                }
                else if (lineNumber == 52 && columnNumber == 24)
                {
                    isobj7SelectRangesCommandDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 24)
                {
                    isobj7ItemInvokedCommandDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 24)
                {
                    isobj7DeleteCommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // Views\Dishes\List\DishesList.xaml line 38
                        this.obj7 = (global::Inventory.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_7(this.obj7);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                throw new global::System.NotImplementedException();
            }

            public void Recycle()
            {
                throw new global::System.NotImplementedException();
            }

            // IDishesList_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Views.DishesList)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Views.DishesList obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Inventory.ViewModels.DishListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Items(obj.Items, phase);
                        this.Update_ViewModel_SelectedItem(obj.SelectedItem, phase);
                        this.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, phase);
                        this.Update_ViewModel_ItemsCount(obj.ItemsCount, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NewCommand(obj.NewCommand, phase);
                        this.Update_ViewModel_RefreshCommand(obj.RefreshCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Query(obj.Query, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_StartSelectionCommand(obj.StartSelectionCommand, phase);
                        this.Update_ViewModel_CancelSelectionCommand(obj.CancelSelectionCommand, phase);
                        this.Update_ViewModel_SelectItemsCommand(obj.SelectItemsCommand, phase);
                        this.Update_ViewModel_DeselectItemsCommand(obj.DeselectItemsCommand, phase);
                        this.Update_ViewModel_SelectRangesCommand(obj.SelectRangesCommand, phase);
                        this.Update_ViewModel_ItemInvokedCommand(obj.ItemInvokedCommand, phase);
                        this.Update_ViewModel_DeleteSelectionCommand(obj.DeleteSelectionCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_Items(global::System.Collections.Generic.IList<global::Inventory.Models.DishModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_ItemsSource(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedItem(global::Inventory.Models.DishModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedItem(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_SelectedItem(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsMultipleSelection(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7IsMultipleSelectionDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_IsMultipleSelection(this.obj7, obj);
                    }
                }
            }
            private void Update_ViewModel_ItemsCount(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7ItemsCountDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_ItemsCount(this.obj7, obj);
                    }
                }
            }
            private void Update_ViewModel_NewCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7NewCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_NewCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_RefreshCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7RefreshCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_RefreshCommand(this.obj7, obj, null);
                    }
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7QuerySubmittedCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_QuerySubmittedCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Query(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7QueryDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_Query(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_StartSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7StartSelectionCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_StartSelectionCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CancelSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7CancelSelectionCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_CancelSelectionCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectItemsCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7SelectItemsCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_SelectItemsCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeselectItemsCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7DeselectItemsCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_DeselectItemsCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectRangesCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7SelectRangesCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_SelectRangesCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ItemInvokedCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7ItemInvokedCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_ItemInvokedCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeleteSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Dishes\List\DishesList.xaml line 38
                    if (!isobj7DeleteCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataGrid_DeleteCommand(this.obj7, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_7_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedItem = (global::Inventory.Models.DishModel)this.obj7.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_7_IsMultipleSelection()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.IsMultipleSelection = this.obj7.IsMultipleSelection;
                        }
                    }
                }
            }
            private void UpdateTwoWay_7_Query()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Query = this.obj7.Query;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DishesList_obj1_BindingsTracking
            {
                private global::System.WeakReference<DishesList_obj1_Bindings> weakRefToBindingObj; 

                public DishesList_obj1_BindingsTracking(DishesList_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DishesList_obj1_Bindings>(obj);
                }

                public DishesList_obj1_Bindings TryGetBindingObject()
                {
                    DishesList_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_SelectedItem(null);
                }

                public void DependencyPropertyChanged_ViewModel(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DishesList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Views.DishesList obj = sender as global::Inventory.Views.DishesList;
                        if (obj != null)
                        {
                            bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_ViewModel = 0;
                public void UpdateChildListeners_(global::Inventory.Views.DishesList obj)
                {
                    DishesList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Views.DishesList.ViewModelProperty, tokenDPC_ViewModel);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_ViewModel = obj.RegisterPropertyChangedCallback(global::Inventory.Views.DishesList.ViewModelProperty, DependencyPropertyChanged_ViewModel);
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DishesList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.DishListViewModel obj = sender as global::Inventory.ViewModels.DishListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                bindings.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                bindings.Update_ViewModel_ItemsCount(obj.ItemsCount, DATA_CHANGED);
                                bindings.Update_ViewModel_Query(obj.Query, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Items":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsMultipleSelection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ItemsCount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ItemsCount(obj.ItemsCount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Query":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Query(obj.Query, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.DishListViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Inventory.ViewModels.DishListViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedItem(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DishesList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Models.DishModel obj = sender as global::Inventory.Models.DishModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.Models.DishModel cache_ViewModel_SelectedItem = null;
                public void UpdateChildListeners_ViewModel_SelectedItem(global::Inventory.Models.DishModel obj)
                {
                    if (obj != cache_ViewModel_SelectedItem)
                    {
                        if (cache_ViewModel_SelectedItem != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedItem).PropertyChanged -= PropertyChanged_ViewModel_SelectedItem;
                            cache_ViewModel_SelectedItem = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedItem = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedItem;
                        }
                    }
                }
                public void RegisterTwoWayListener_7(global::Inventory.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_SelectedItem();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.IsMultipleSelectionProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_IsMultipleSelection();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.QueryProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_Query();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Dishes\List\DishesList.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    DishesList_obj1_Bindings bindings = new DishesList_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 2: // Views\Dishes\List\DishesList.xaml line 13
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element2 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    DishesList_obj2_Bindings bindings = new DishesList_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element2.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element2, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

