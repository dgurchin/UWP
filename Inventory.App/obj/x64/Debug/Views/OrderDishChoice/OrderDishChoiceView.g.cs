#pragma checksum "D:\Delivery\src\Inventory.App\Views\OrderDishChoice\OrderDishChoiceView.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A0CAE0CA462CF79173D8ED0B73569E14"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Views
{
    partial class OrderDishChoiceView : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Views_OrderDishesList_ViewModel(global::Inventory.Views.OrderDishesList obj, global::Inventory.ViewModels.OrderDishListViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.OrderDishListViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.OrderDishListViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Inventory_Views_OrderDishChoiceGrid_ViewModel(global::Inventory.Views.OrderDishChoiceGrid obj, global::Inventory.ViewModels.DishListViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.DishListViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.DishListViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Inventory_Views_OrderDishChoiceList_ViewModel(global::Inventory.Views.OrderDishChoiceList obj, global::Inventory.ViewModels.DishListViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.DishListViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.DishListViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Inventory_Views_OrderDishChoiceGrid_NewCommand(global::Inventory.Views.OrderDishChoiceGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.NewCommand = value;
            }
            public static void Set_Inventory_Views_OrderDishChoiceList_NewCommand(global::Inventory.Views.OrderDishChoiceList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.NewCommand = value;
            }
            public static void Set_Inventory_Views_OrderDishChoiceDishesFilter_ViewModel(global::Inventory.Views.OrderDishChoiceDishesFilter obj, global::Inventory.ViewModels.OrderDishChoiceDishesFilterViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.OrderDishChoiceDishesFilterViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.OrderDishChoiceDishesFilterViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class OrderDishChoiceView_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IOrderDishChoiceView_Bindings
        {
            private global::Inventory.ViewModels.OrderDishChoiceViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj2;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2ViewModelDisabled = false;

            public OrderDishChoiceView_obj2_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 15 && columnNumber == 40)
                {
                    isobj2ViewModelDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 15
                        this.obj2 = new global::System.WeakReference((global::Inventory.Views.OrderDishChoiceList)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj2.Target as global::Inventory.Views.OrderDishChoiceList).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Inventory.ViewModels.OrderDishChoiceViewModel) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IOrderDishChoiceView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.ViewModels.OrderDishChoiceViewModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.ViewModels.OrderDishChoiceViewModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_DishesList(obj.DishesList, phase);
                    }
                }
            }
            private void Update_DishesList(global::Inventory.ViewModels.DishListViewModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\OrderDishChoice\OrderDishChoiceView.xaml line 15
                    if (!isobj2ViewModelDisabled)
                    {
                        if ((this.obj2.Target as global::Inventory.Views.OrderDishChoiceList) != null)
                        {
                            XamlBindingSetters.Set_Inventory_Views_OrderDishChoiceList_ViewModel((this.obj2.Target as global::Inventory.Views.OrderDishChoiceList), obj, null);
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class OrderDishChoiceView_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IOrderDishChoiceView_Bindings
        {
            private global::Inventory.Views.OrderDishChoiceView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Inventory.Views.OrderDishesList obj3;
            private global::Inventory.Views.OrderDishChoiceGrid obj4;
            private global::Inventory.Views.OrderDishChoiceList obj5;
            private global::Inventory.Views.OrderDishChoiceDishesFilter obj7;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj8;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3ViewModelDisabled = false;
            private static bool isobj4ViewModelDisabled = false;
            private static bool isobj4NewCommandDisabled = false;
            private static bool isobj5ViewModelDisabled = false;
            private static bool isobj5NewCommandDisabled = false;
            private static bool isobj7ViewModelDisabled = false;
            private static bool isobj8CommandDisabled = false;

            private OrderDishChoiceView_obj1_BindingsTracking bindingsTracking;

            public OrderDishChoiceView_obj1_Bindings()
            {
                this.bindingsTracking = new OrderDishChoiceView_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 71 && columnNumber == 48)
                {
                    isobj3ViewModelDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 48)
                {
                    isobj4ViewModelDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 103)
                {
                    isobj4NewCommandDisabled = true;
                }
                else if (lineNumber == 58 && columnNumber == 48)
                {
                    isobj5ViewModelDisabled = true;
                }
                else if (lineNumber == 58 && columnNumber == 103)
                {
                    isobj5NewCommandDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 82)
                {
                    isobj7ViewModelDisabled = true;
                }
                else if (lineNumber == 40 && columnNumber == 35)
                {
                    isobj8CommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 71
                        this.obj3 = (global::Inventory.Views.OrderDishesList)target;
                        break;
                    case 4: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 61
                        this.obj4 = (global::Inventory.Views.OrderDishChoiceGrid)target;
                        break;
                    case 5: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 58
                        this.obj5 = (global::Inventory.Views.OrderDishChoiceList)target;
                        break;
                    case 7: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 43
                        this.obj7 = (global::Inventory.Views.OrderDishChoiceDishesFilter)target;
                        break;
                    case 8: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 37
                        this.obj8 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                throw new global::System.NotImplementedException();
            }

            public void Recycle()
            {
                throw new global::System.NotImplementedException();
            }

            // IOrderDishChoiceView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Views.OrderDishChoiceView)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Views.OrderDishChoiceView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Inventory.ViewModels.OrderDishChoiceViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrderDishes(obj.OrderDishes, phase);
                        this.Update_ViewModel_DishesList(obj.DishesList, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_AppendDishCommand(obj.AppendDishCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Filter(obj.Filter, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_GoBackCommand(obj.GoBackCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_OrderDishes(global::Inventory.ViewModels.OrderDishListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_OrderDishes(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\OrderDishChoice\OrderDishChoiceView.xaml line 71
                    if (!isobj3ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrderDishesList_ViewModel(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DishesList(global::Inventory.ViewModels.DishListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_DishesList(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\OrderDishChoice\OrderDishChoiceView.xaml line 61
                    if (!isobj4ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrderDishChoiceGrid_ViewModel(this.obj4, obj, null);
                    }
                    // Views\OrderDishChoice\OrderDishChoiceView.xaml line 58
                    if (!isobj5ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrderDishChoiceList_ViewModel(this.obj5, obj, null);
                    }
                }
            }
            private void Update_ViewModel_AppendDishCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\OrderDishChoice\OrderDishChoiceView.xaml line 61
                    if (!isobj4NewCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrderDishChoiceGrid_NewCommand(this.obj4, obj, null);
                    }
                    // Views\OrderDishChoice\OrderDishChoiceView.xaml line 58
                    if (!isobj5NewCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrderDishChoiceList_NewCommand(this.obj5, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Filter(global::Inventory.ViewModels.OrderDishChoiceDishesFilterViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Filter(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\OrderDishChoice\OrderDishChoiceView.xaml line 43
                    if (!isobj7ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrderDishChoiceDishesFilter_ViewModel(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_GoBackCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\OrderDishChoice\OrderDishChoiceView.xaml line 37
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class OrderDishChoiceView_obj1_BindingsTracking
            {
                private global::System.WeakReference<OrderDishChoiceView_obj1_Bindings> weakRefToBindingObj; 

                public OrderDishChoiceView_obj1_BindingsTracking(OrderDishChoiceView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<OrderDishChoiceView_obj1_Bindings>(obj);
                }

                public OrderDishChoiceView_obj1_Bindings TryGetBindingObject()
                {
                    OrderDishChoiceView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_OrderDishes(null);
                    UpdateChildListeners_ViewModel_DishesList(null);
                    UpdateChildListeners_ViewModel_Filter(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    OrderDishChoiceView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.OrderDishChoiceViewModel obj = sender as global::Inventory.ViewModels.OrderDishChoiceViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_OrderDishes(obj.OrderDishes, DATA_CHANGED);
                                bindings.Update_ViewModel_DishesList(obj.DishesList, DATA_CHANGED);
                                bindings.Update_ViewModel_Filter(obj.Filter, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "OrderDishes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrderDishes(obj.OrderDishes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DishesList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DishesList(obj.DishesList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Filter":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Filter(obj.Filter, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.OrderDishChoiceViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Inventory.ViewModels.OrderDishChoiceViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_OrderDishes(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    OrderDishChoiceView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.OrderDishListViewModel obj = sender as global::Inventory.ViewModels.OrderDishListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.OrderDishListViewModel cache_ViewModel_OrderDishes = null;
                public void UpdateChildListeners_ViewModel_OrderDishes(global::Inventory.ViewModels.OrderDishListViewModel obj)
                {
                    if (obj != cache_ViewModel_OrderDishes)
                    {
                        if (cache_ViewModel_OrderDishes != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_OrderDishes).PropertyChanged -= PropertyChanged_ViewModel_OrderDishes;
                            cache_ViewModel_OrderDishes = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_OrderDishes = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_OrderDishes;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_DishesList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    OrderDishChoiceView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.DishListViewModel obj = sender as global::Inventory.ViewModels.DishListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.DishListViewModel cache_ViewModel_DishesList = null;
                public void UpdateChildListeners_ViewModel_DishesList(global::Inventory.ViewModels.DishListViewModel obj)
                {
                    if (obj != cache_ViewModel_DishesList)
                    {
                        if (cache_ViewModel_DishesList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_DishesList).PropertyChanged -= PropertyChanged_ViewModel_DishesList;
                            cache_ViewModel_DishesList = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_DishesList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_DishesList;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Filter(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    OrderDishChoiceView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.OrderDishChoiceDishesFilterViewModel obj = sender as global::Inventory.ViewModels.OrderDishChoiceDishesFilterViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.OrderDishChoiceDishesFilterViewModel cache_ViewModel_Filter = null;
                public void UpdateChildListeners_ViewModel_Filter(global::Inventory.ViewModels.OrderDishChoiceDishesFilterViewModel obj)
                {
                    if (obj != cache_ViewModel_Filter)
                    {
                        if (cache_ViewModel_Filter != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Filter).PropertyChanged -= PropertyChanged_ViewModel_Filter;
                            cache_ViewModel_Filter = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Filter = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Filter;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 6: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 36
                {
                    this.commandBar = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    OrderDishChoiceView_obj1_Bindings bindings = new OrderDishChoiceView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 2: // Views\OrderDishChoice\OrderDishChoiceView.xaml line 15
                {                    
                    global::Inventory.Views.OrderDishChoiceList element2 = (global::Inventory.Views.OrderDishChoiceList)target;
                    OrderDishChoiceView_obj2_Bindings bindings = new OrderDishChoiceView_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element2.DataContext);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element2, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

