#pragma checksum "D:\Delivery\src\Inventory.App\Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "CEF68F00C3E3DF078BB96ECD34854756"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Views
{
    partial class PhoneCallReceiveView : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Views_PhoneCallReceiveOrdersList_ViewModel(global::Inventory.Views.PhoneCallReceiveOrdersList obj, global::Inventory.ViewModels.OrderListViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.OrderListViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.OrderListViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Inventory_Views_OrdersDetails_ViewModel(global::Inventory.Views.OrdersDetails obj, global::Inventory.ViewModels.OrderDetailsViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.OrderDetailsViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.OrderDetailsViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Inventory_Views_OrdersOrderStatusHistory_ViewModel(global::Inventory.Views.OrdersOrderStatusHistory obj, global::Inventory.ViewModels.OrderStatusHistoryListViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.OrderStatusHistoryListViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.OrderStatusHistoryListViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Maps_MapControl_ZoomLevel(global::Windows.UI.Xaml.Controls.Maps.MapControl obj, global::System.Double value)
            {
                obj.ZoomLevel = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Maps_MapControl_Center(global::Windows.UI.Xaml.Controls.Maps.MapControl obj, global::Windows.Devices.Geolocation.Geopoint value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.Devices.Geolocation.Geopoint) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.Devices.Geolocation.Geopoint), targetNullValue);
                }
                obj.Center = value;
            }
            public static void Set_Inventory_Views_OrdersOrderDishes_ViewModel(global::Inventory.Views.OrdersOrderDishes obj, global::Inventory.ViewModels.OrderDishListViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.OrderDishListViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.OrderDishListViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Grid_RowSpan(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Int32 value)
            {
                global::Windows.UI.Xaml.Controls.Grid.SetRowSpan(obj, value);
            }
            public static void Set_Inventory_Controls_Section_Header(global::Inventory.Controls.Section obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Header = value;
            }
            public static void Set_Inventory_Controls_Section_IsButtonVisible(global::Inventory.Controls.Section obj, global::System.Boolean value)
            {
                obj.IsButtonVisible = value;
            }
            public static void Set_Inventory_Views_PhoneCallReceiveCustomerDetails_ViewModel(global::Inventory.Views.PhoneCallReceiveCustomerDetails obj, global::Inventory.ViewModels.CustomerDetailsViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.CustomerDetailsViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.CustomerDetailsViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Inventory_Views_PhoneCallConnectControl_ViewModel(global::Inventory.Views.PhoneCallConnectControl obj, global::Inventory.Services.PhoneCallViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.Services.PhoneCallViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.Services.PhoneCallViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedValue(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedValue = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class PhoneCallReceiveView_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPhoneCallReceiveView_Bindings
        {
            private global::Inventory.Views.PhoneCallReceiveView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Grid obj3;
            private global::Inventory.Controls.Section obj4;
            private global::Inventory.Controls.Section obj5;
            private global::Inventory.Views.OrdersOrderStatusHistory obj7;
            private global::Windows.UI.Xaml.Controls.Maps.MapControl obj8;
            private global::Inventory.Views.OrdersOrderDishes obj9;
            private global::Inventory.Views.OrdersDetails obj10;
            private global::Windows.UI.Xaml.Controls.Grid obj11;
            private global::Inventory.Controls.Section obj12;
            private global::Inventory.Views.PhoneCallReceiveOrdersList obj13;
            private global::Inventory.Views.PhoneCallReceiveCustomerDetails obj14;
            private global::Inventory.Views.PhoneCallConnectControl obj15;
            private global::Inventory.Controls.FormComboBox obj16;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj4IsEnabledDisabled = false;
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5VisibilityDisabled = false;
            private static bool isobj7ViewModelDisabled = false;
            private static bool isobj8ZoomLevelDisabled = false;
            private static bool isobj8CenterDisabled = false;
            private static bool isobj9ViewModelDisabled = false;
            private static bool isobj10ViewModelDisabled = false;
            private static bool isobj11RowSpanDisabled = false;
            private static bool isobj12HeaderDisabled = false;
            private static bool isobj12IsButtonVisibleDisabled = false;
            private static bool isobj13ViewModelDisabled = false;
            private static bool isobj14ViewModelDisabled = false;
            private static bool isobj15ViewModelDisabled = false;
            private static bool isobj16ItemsSourceDisabled = false;
            private static bool isobj16SelectedItemDisabled = false;
            private static bool isobj16SelectedValueDisabled = false;

            private PhoneCallReceiveView_obj1_BindingsTracking bindingsTracking;

            public PhoneCallReceiveView_obj1_Bindings()
            {
                this.bindingsTracking = new PhoneCallReceiveView_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 74 && columnNumber == 23)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 75 && columnNumber == 35)
                {
                    isobj4IsEnabledDisabled = true;
                }
                else if (lineNumber == 79 && columnNumber == 29)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 111 && columnNumber == 29)
                {
                    isobj5VisibilityDisabled = true;
                }
                else if (lineNumber == 98 && columnNumber == 74)
                {
                    isobj7ViewModelDisabled = true;
                }
                else if (lineNumber == 91 && columnNumber == 45)
                {
                    isobj8ZoomLevelDisabled = true;
                }
                else if (lineNumber == 92 && columnNumber == 45)
                {
                    isobj8CenterDisabled = true;
                }
                else if (lineNumber == 86 && columnNumber == 67)
                {
                    isobj9ViewModelDisabled = true;
                }
                else if (lineNumber == 83 && columnNumber == 63)
                {
                    isobj10ViewModelDisabled = true;
                }
                else if (lineNumber == 63 && columnNumber == 39)
                {
                    isobj11RowSpanDisabled = true;
                }
                else if (lineNumber == 64 && columnNumber == 39)
                {
                    isobj12HeaderDisabled = true;
                }
                else if (lineNumber == 67 && columnNumber == 33)
                {
                    isobj12IsButtonVisibleDisabled = true;
                }
                else if (lineNumber == 68 && columnNumber == 59)
                {
                    isobj13ViewModelDisabled = true;
                }
                else if (lineNumber == 59 && columnNumber == 92)
                {
                    isobj14ViewModelDisabled = true;
                }
                else if (lineNumber == 52 && columnNumber == 60)
                {
                    isobj15ViewModelDisabled = true;
                }
                else if (lineNumber == 46 && columnNumber == 68)
                {
                    isobj16ItemsSourceDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 40)
                {
                    isobj16SelectedItemDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 40)
                {
                    isobj16SelectedValueDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 73
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 4: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 75
                        this.obj4 = (global::Inventory.Controls.Section)target;
                        break;
                    case 5: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 110
                        this.obj5 = (global::Inventory.Controls.Section)target;
                        break;
                    case 7: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 98
                        this.obj7 = (global::Inventory.Views.OrdersOrderStatusHistory)target;
                        break;
                    case 8: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 90
                        this.obj8 = (global::Windows.UI.Xaml.Controls.Maps.MapControl)target;
                        break;
                    case 9: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 86
                        this.obj9 = (global::Inventory.Views.OrdersOrderDishes)target;
                        break;
                    case 10: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 83
                        this.obj10 = (global::Inventory.Views.OrdersDetails)target;
                        break;
                    case 11: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 63
                        this.obj11 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 12: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 64
                        this.obj12 = (global::Inventory.Controls.Section)target;
                        break;
                    case 13: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 68
                        this.obj13 = (global::Inventory.Views.PhoneCallReceiveOrdersList)target;
                        break;
                    case 14: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 59
                        this.obj14 = (global::Inventory.Views.PhoneCallReceiveCustomerDetails)target;
                        break;
                    case 15: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 52
                        this.obj15 = (global::Inventory.Views.PhoneCallConnectControl)target;
                        break;
                    case 16: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 46
                        this.obj16 = (global::Inventory.Controls.FormComboBox)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                throw new global::System.NotImplementedException();
            }

            public void Recycle()
            {
                throw new global::System.NotImplementedException();
            }

            // IPhoneCallReceiveView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Views.PhoneCallReceiveView)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            private bool TryGet_ViewModel_OrdersView_OrderList_IsMultipleSelection(out global::System.Boolean val)
            {
                global::Inventory.ViewModels.OrderListViewModel obj;
                if (TryGet_ViewModel_OrdersView_OrderList(out obj) && obj != null)
                {
                    val = obj.IsMultipleSelection;
                    return true;
                }
                else
                {
                    val = default(global::System.Boolean);
                    return false;
                }
            }

            private bool TryGet_ViewModel_OrdersView_OrderList(out global::Inventory.ViewModels.OrderListViewModel val)
            {
                global::Inventory.ViewModels.OrdersViewModel obj;
                if (TryGet_ViewModel_OrdersView(out obj) && obj != null)
                {
                    val = obj.OrderList;
                    return true;
                }
                else
                {
                    val = default(global::Inventory.ViewModels.OrderListViewModel);
                    return false;
                }
            }

            private bool TryGet_ViewModel_OrdersView(out global::Inventory.ViewModels.OrdersViewModel val)
            {
                global::Inventory.Services.PhoneCallReceiveViewModel obj;
                if (TryGet_ViewModel(out obj) && obj != null)
                {
                    val = obj.OrdersView;
                    return true;
                }
                else
                {
                    val = default(global::Inventory.ViewModels.OrdersViewModel);
                    return false;
                }
            }

            private bool TryGet_ViewModel(out global::Inventory.Services.PhoneCallReceiveViewModel val)
            {
                global::Inventory.Views.PhoneCallReceiveView obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj.ViewModel;
                    return true;
                }
                else
                {
                    val = default(global::Inventory.Services.PhoneCallReceiveViewModel);
                    return false;
                }
            }

            private bool TryGet_(out global::Inventory.Views.PhoneCallReceiveView val)
            {
                val = this.dataRoot;
                return true;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_M_GetRowSpan_2072205030(int phase)
            {
                global::System.Boolean p0;
                if (!TryGet_ViewModel_OrdersView_OrderList_IsMultipleSelection(out p0)) { return; }
                global::System.Int32 result = this.dataRoot.GetRowSpan(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 63
                    if (!isobj11RowSpanDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Grid_RowSpan(this.obj11, result);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                foreach(var function in this.PendingFunctionBindings)
                {
                    function.Value.Invoke(phase);
                }
                this.PendingFunctionBindings.Clear();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Views.PhoneCallReceiveView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                        this.Update_M_GetRowSpan_2072205030(phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_ViewModel(global::Inventory.Services.PhoneCallReceiveViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrdersView(obj.OrdersView, phase);
                        this.Update_ViewModel_Map(obj.Map, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsMainView(obj.IsMainView, phase);
                        this.Update_ViewModel_CustomerDetails(obj.CustomerDetails, phase);
                        this.Update_ViewModel_PhoneCall(obj.PhoneCall, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CustomerList(obj.CustomerList, phase);
                        this.Update_ViewModel_CustomerCurrent(obj.CustomerCurrent, phase);
                    }
                }
            }
            private void Update_ViewModel_OrdersView(global::Inventory.ViewModels.OrdersViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_OrdersView(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrdersView_OrderList(obj.OrderList, phase);
                        this.Update_ViewModel_OrdersView_OrderDetails(obj.OrderDetails, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrdersView_OrderStatusHistoryList(obj.OrderStatusHistoryList, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrdersView_Map(obj.Map, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrdersView_OrderDishList(obj.OrderDishList, phase);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderList(global::Inventory.ViewModels.OrderListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_OrdersView_OrderList(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrdersView_OrderList_IsMultipleSelection(obj.IsMultipleSelection, phase);
                        this.Update_ViewModel_OrdersView_OrderList_Title(obj.Title, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 68
                    if (!isobj13ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_PhoneCallReceiveOrdersList_ViewModel(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderList_IsMultipleSelection(global::System.Boolean obj, int phase)
            {
                this.Update_M_GetRowSpan_2072205030(phase);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 73
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("InverseBoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderDetails(global::Inventory.ViewModels.OrderDetailsViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_OrdersView_OrderDetails(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrdersView_OrderDetails_IsEnabled(obj.IsEnabled, phase);
                        this.Update_ViewModel_OrdersView_OrderDetails_IsDataAvailable(obj.IsDataAvailable, phase);
                        this.Update_ViewModel_OrdersView_OrderDetails_IsDataUnavailable(obj.IsDataUnavailable, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 83
                    if (!isobj10ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrdersDetails_ViewModel(this.obj10, obj, null);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderDetails_IsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 75
                    if (!isobj4IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj4, obj);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderDetails_IsDataAvailable(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_OrdersView_OrderDetails_IsDataAvailable_Cast_IsDataAvailable_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_OrdersView_OrderDetails_IsDataAvailable_Cast_IsDataAvailable_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 75
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, obj);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderDetails_IsDataUnavailable(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_OrdersView_OrderDetails_IsDataUnavailable_Cast_IsDataUnavailable_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_OrdersView_OrderDetails_IsDataUnavailable_Cast_IsDataUnavailable_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 110
                    if (!isobj5VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, obj);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderStatusHistoryList(global::Inventory.ViewModels.OrderStatusHistoryListViewModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 98
                    if (!isobj7ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrdersOrderStatusHistory_ViewModel(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Map(global::Inventory.ViewModels.MapViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Map(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Map_ZoomLevel(obj.ZoomLevel, phase);
                    }
                }
            }
            private void Update_ViewModel_Map_ZoomLevel(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 90
                    if (!isobj8ZoomLevelDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Maps_MapControl_ZoomLevel(this.obj8, obj);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_Map(global::Inventory.ViewModels.MapViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_OrdersView_Map(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OrdersView_Map_Center(obj.Center, phase);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_Map_Center(global::Windows.Devices.Geolocation.Geopoint obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 90
                    if (!isobj8CenterDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Maps_MapControl_Center(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderDishList(global::Inventory.ViewModels.OrderDishListViewModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 86
                    if (!isobj9ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_OrdersOrderDishes_ViewModel(this.obj9, obj, null);
                    }
                }
            }
            private void Update_M_GetRowSpan_2072205030(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj11RowSpanDisabled)
                    {
                        this.PendingFunctionBindings["M_GetRowSpan_2072205030"] = new InvokeFunctionDelegate(this.Invoke_M_GetRowSpan_2072205030); 
                    }
                }
            }
            private void Update_ViewModel_OrdersView_OrderList_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 64
                    if (!isobj12HeaderDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_Section_Header(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsMainView(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 64
                    if (!isobj12IsButtonVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_Section_IsButtonVisible(this.obj12, obj);
                    }
                }
            }
            private void Update_ViewModel_CustomerDetails(global::Inventory.ViewModels.CustomerDetailsViewModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 59
                    if (!isobj14ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_PhoneCallReceiveCustomerDetails_ViewModel(this.obj14, obj, null);
                    }
                }
            }
            private void Update_ViewModel_PhoneCall(global::Inventory.Services.PhoneCallViewModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 52
                    if (!isobj15ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_PhoneCallConnectControl_ViewModel(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CustomerList(global::Inventory.ViewModels.CustomerListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_CustomerList(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CustomerList_Items(obj.Items, phase);
                    }
                }
            }
            private void Update_ViewModel_CustomerList_Items(global::System.Collections.Generic.IList<global::Inventory.Models.CustomerModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 46
                    if (!isobj16ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj16, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CustomerCurrent(global::Inventory.Models.CustomerModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_CustomerCurrent(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CustomerCurrent_Id(obj.Id, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 46
                    if (!isobj16SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj16, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CustomerCurrent_Id(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 46
                    if (!isobj16SelectedValueDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedValue(this.obj16, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class PhoneCallReceiveView_obj1_BindingsTracking
            {
                private global::System.WeakReference<PhoneCallReceiveView_obj1_Bindings> weakRefToBindingObj; 

                public PhoneCallReceiveView_obj1_BindingsTracking(PhoneCallReceiveView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<PhoneCallReceiveView_obj1_Bindings>(obj);
                }

                public PhoneCallReceiveView_obj1_Bindings TryGetBindingObject()
                {
                    PhoneCallReceiveView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_OrdersView(null);
                    UpdateChildListeners_ViewModel_OrdersView_OrderList(null);
                    UpdateChildListeners_ViewModel_OrdersView_OrderDetails(null);
                    UpdateChildListeners_ViewModel_Map(null);
                    UpdateChildListeners_ViewModel_OrdersView_Map(null);
                    UpdateChildListeners_ViewModel_CustomerList(null);
                    UpdateChildListeners_ViewModel_CustomerCurrent(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PhoneCallReceiveView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Services.PhoneCallReceiveViewModel obj = sender as global::Inventory.Services.PhoneCallReceiveViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_OrdersView(obj.OrdersView, DATA_CHANGED);
                                bindings.Update_ViewModel_Map(obj.Map, DATA_CHANGED);
                                bindings.Update_ViewModel_CustomerList(obj.CustomerList, DATA_CHANGED);
                                bindings.Update_ViewModel_CustomerCurrent(obj.CustomerCurrent, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "OrdersView":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView(obj.OrdersView, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Map":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Map(obj.Map, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CustomerList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerList(obj.CustomerList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CustomerCurrent":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerCurrent(obj.CustomerCurrent, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.Services.PhoneCallReceiveViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Inventory.Services.PhoneCallReceiveViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_OrdersView(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PhoneCallReceiveView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.OrdersViewModel obj = sender as global::Inventory.ViewModels.OrdersViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_OrdersView_OrderList(obj.OrderList, DATA_CHANGED);
                                bindings.Update_ViewModel_OrdersView_OrderDetails(obj.OrderDetails, DATA_CHANGED);
                                bindings.Update_ViewModel_OrdersView_Map(obj.Map, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "OrderList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_OrderList(obj.OrderList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OrderDetails":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_OrderDetails(obj.OrderDetails, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Map":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_Map(obj.Map, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.OrdersViewModel cache_ViewModel_OrdersView = null;
                public void UpdateChildListeners_ViewModel_OrdersView(global::Inventory.ViewModels.OrdersViewModel obj)
                {
                    if (obj != cache_ViewModel_OrdersView)
                    {
                        if (cache_ViewModel_OrdersView != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_OrdersView).PropertyChanged -= PropertyChanged_ViewModel_OrdersView;
                            cache_ViewModel_OrdersView = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_OrdersView = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_OrdersView;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_OrdersView_OrderList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PhoneCallReceiveView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.OrderListViewModel obj = sender as global::Inventory.ViewModels.OrderListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_OrdersView_OrderList_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                bindings.Update_ViewModel_OrdersView_OrderList_Title(obj.Title, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsMultipleSelection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_OrderList_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_OrderList_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.OrderListViewModel cache_ViewModel_OrdersView_OrderList = null;
                public void UpdateChildListeners_ViewModel_OrdersView_OrderList(global::Inventory.ViewModels.OrderListViewModel obj)
                {
                    if (obj != cache_ViewModel_OrdersView_OrderList)
                    {
                        if (cache_ViewModel_OrdersView_OrderList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_OrdersView_OrderList).PropertyChanged -= PropertyChanged_ViewModel_OrdersView_OrderList;
                            cache_ViewModel_OrdersView_OrderList = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_OrdersView_OrderList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_OrdersView_OrderList;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_OrdersView_OrderDetails(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PhoneCallReceiveView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.OrderDetailsViewModel obj = sender as global::Inventory.ViewModels.OrderDetailsViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_OrdersView_OrderDetails_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                                bindings.Update_ViewModel_OrdersView_OrderDetails_IsDataAvailable(obj.IsDataAvailable, DATA_CHANGED);
                                bindings.Update_ViewModel_OrdersView_OrderDetails_IsDataUnavailable(obj.IsDataUnavailable, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_OrderDetails_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDataAvailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_OrderDetails_IsDataAvailable(obj.IsDataAvailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDataUnavailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_OrderDetails_IsDataUnavailable(obj.IsDataUnavailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.OrderDetailsViewModel cache_ViewModel_OrdersView_OrderDetails = null;
                public void UpdateChildListeners_ViewModel_OrdersView_OrderDetails(global::Inventory.ViewModels.OrderDetailsViewModel obj)
                {
                    if (obj != cache_ViewModel_OrdersView_OrderDetails)
                    {
                        if (cache_ViewModel_OrdersView_OrderDetails != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_OrdersView_OrderDetails).PropertyChanged -= PropertyChanged_ViewModel_OrdersView_OrderDetails;
                            cache_ViewModel_OrdersView_OrderDetails = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_OrdersView_OrderDetails = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_OrdersView_OrderDetails;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Map(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PhoneCallReceiveView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.MapViewModel obj = sender as global::Inventory.ViewModels.MapViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Map_ZoomLevel(obj.ZoomLevel, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ZoomLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Map_ZoomLevel(obj.ZoomLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.MapViewModel cache_ViewModel_Map = null;
                public void UpdateChildListeners_ViewModel_Map(global::Inventory.ViewModels.MapViewModel obj)
                {
                    if (obj != cache_ViewModel_Map)
                    {
                        if (cache_ViewModel_Map != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Map).PropertyChanged -= PropertyChanged_ViewModel_Map;
                            cache_ViewModel_Map = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Map = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Map;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_OrdersView_Map(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PhoneCallReceiveView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.MapViewModel obj = sender as global::Inventory.ViewModels.MapViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_OrdersView_Map_Center(obj.Center, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Center":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OrdersView_Map_Center(obj.Center, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.MapViewModel cache_ViewModel_OrdersView_Map = null;
                public void UpdateChildListeners_ViewModel_OrdersView_Map(global::Inventory.ViewModels.MapViewModel obj)
                {
                    if (obj != cache_ViewModel_OrdersView_Map)
                    {
                        if (cache_ViewModel_OrdersView_Map != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_OrdersView_Map).PropertyChanged -= PropertyChanged_ViewModel_OrdersView_Map;
                            cache_ViewModel_OrdersView_Map = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_OrdersView_Map = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_OrdersView_Map;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_CustomerList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PhoneCallReceiveView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.CustomerListViewModel obj = sender as global::Inventory.ViewModels.CustomerListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_CustomerList_Items(obj.Items, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Items":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerList_Items(obj.Items, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.CustomerListViewModel cache_ViewModel_CustomerList = null;
                public void UpdateChildListeners_ViewModel_CustomerList(global::Inventory.ViewModels.CustomerListViewModel obj)
                {
                    if (obj != cache_ViewModel_CustomerList)
                    {
                        if (cache_ViewModel_CustomerList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_CustomerList).PropertyChanged -= PropertyChanged_ViewModel_CustomerList;
                            cache_ViewModel_CustomerList = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_CustomerList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_CustomerList;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_CustomerCurrent(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PhoneCallReceiveView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Models.CustomerModel obj = sender as global::Inventory.Models.CustomerModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_CustomerCurrent_Id(obj.Id, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Id":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerCurrent_Id(obj.Id, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.Models.CustomerModel cache_ViewModel_CustomerCurrent = null;
                public void UpdateChildListeners_ViewModel_CustomerCurrent(global::Inventory.Models.CustomerModel obj)
                {
                    if (obj != cache_ViewModel_CustomerCurrent)
                    {
                        if (cache_ViewModel_CustomerCurrent != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_CustomerCurrent).PropertyChanged -= PropertyChanged_ViewModel_CustomerCurrent;
                            cache_ViewModel_CustomerCurrent = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_CustomerCurrent = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_CustomerCurrent;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 4: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 75
                {
                    global::Inventory.Controls.Section element4 = (global::Inventory.Controls.Section)(target);
                    ((global::Inventory.Controls.Section)element4).HeaderButtonClick += this.OpenDetailsInNewView;
                }
                break;
            case 6: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 81
                {
                    this.pivot = (global::Windows.UI.Xaml.Controls.Pivot)(target);
                }
                break;
            case 8: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 90
                {
                    this.mapControl = (global::Windows.UI.Xaml.Controls.Maps.MapControl)(target);
                }
                break;
            case 12: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 64
                {
                    global::Inventory.Controls.Section element12 = (global::Inventory.Controls.Section)(target);
                    ((global::Inventory.Controls.Section)element12).HeaderButtonClick += this.OpenInNewView;
                }
                break;
            case 15: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 52
                {
                    this.phoneView = (global::Inventory.Views.PhoneCallConnectControl)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Phone\PhoneCallReceive\PhoneCallReceiveView.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    PhoneCallReceiveView_obj1_Bindings bindings = new PhoneCallReceiveView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

