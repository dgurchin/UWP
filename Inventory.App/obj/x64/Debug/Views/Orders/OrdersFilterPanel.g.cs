#pragma checksum "D:\Delivery\src\Inventory.App\Views\Orders\OrdersFilterPanel.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "6F6AE0CD535B23BD2355F2C96570980D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Views
{
    partial class OrdersFilterPanel : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Controls_DataList_ItemsSource(global::Inventory.Controls.DataList obj, global::System.Collections.IEnumerable value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Collections.IEnumerable) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Collections.IEnumerable), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectedItem(global::Inventory.Controls.DataList obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Inventory_Controls_DataList_IsMultipleSelection(global::Inventory.Controls.DataList obj, global::System.Boolean value)
            {
                obj.IsMultipleSelection = value;
            }
            public static void Set_Inventory_Controls_DataList_IsExtendedSelection(global::Inventory.Controls.DataList obj, global::System.Boolean value)
            {
                obj.IsExtendedSelection = value;
            }
            public static void Set_Inventory_Controls_DataList_ItemsCount(global::Inventory.Controls.DataList obj, global::System.Int32 value)
            {
                obj.ItemsCount = value;
            }
            public static void Set_Inventory_Controls_DataList_RefreshCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.RefreshCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_QuerySubmittedCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.QuerySubmittedCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_Query(global::Inventory.Controls.DataList obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Query = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_DataList_StartSelectionCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.StartSelectionCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_CancelSelectionCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelSelectionCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectItemsCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.SelectItemsCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_DeselectItemsCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeselectItemsCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectRangesCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.SelectRangesCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_DeleteCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeleteCommand = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class OrdersFilterPanel_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IOrdersFilterPanel_Bindings
        {
            private global::Inventory.Models.OrderStatusModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj2;
            private global::Windows.UI.Xaml.Controls.Grid obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj4TextDisabled = false;

            private OrdersFilterPanel_obj2_BindingsTracking bindingsTracking;

            public OrdersFilterPanel_obj2_Bindings()
            {
                this.bindingsTracking = new OrdersFilterPanel_obj2_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 25 && columnNumber == 23)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 29 && columnNumber == 48)
                {
                    isobj4TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\Orders\OrdersFilterPanel.xaml line 24
                        this.obj2 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 3: // Views\Orders\OrdersFilterPanel.xaml line 25
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 4: // Views\Orders\OrdersFilterPanel.xaml line 29
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj2.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Inventory.Models.OrderStatusModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IOrdersFilterPanel_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Models.OrderStatusModel)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Models.OrderStatusModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_IsEmpty(obj.IsEmpty, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_IsEmpty(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 25
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("InverseBoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 29
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class OrdersFilterPanel_obj2_BindingsTracking
            {
                private global::System.WeakReference<OrdersFilterPanel_obj2_Bindings> weakRefToBindingObj; 

                public OrdersFilterPanel_obj2_BindingsTracking(OrdersFilterPanel_obj2_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<OrdersFilterPanel_obj2_Bindings>(obj);
                }

                public OrdersFilterPanel_obj2_Bindings TryGetBindingObject()
                {
                    OrdersFilterPanel_obj2_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    OrdersFilterPanel_obj2_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Models.OrderStatusModel obj = sender as global::Inventory.Models.OrderStatusModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Inventory.Models.OrderStatusModel obj)
                {
                    OrdersFilterPanel_obj2_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class OrdersFilterPanel_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IOrdersFilterPanel_Bindings
        {
            private global::Inventory.Views.OrdersFilterPanel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Inventory.Controls.DataList obj6;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj6ItemsSourceDisabled = false;
            private static bool isobj6SelectedItemDisabled = false;
            private static bool isobj6IsMultipleSelectionDisabled = false;
            private static bool isobj6IsExtendedSelectionDisabled = false;
            private static bool isobj6ItemsCountDisabled = false;
            private static bool isobj6RefreshCommandDisabled = false;
            private static bool isobj6QueryDisabled = false;
            private static bool isobj6QuerySubmittedCommandDisabled = false;
            private static bool isobj6StartSelectionCommandDisabled = false;
            private static bool isobj6CancelSelectionCommandDisabled = false;
            private static bool isobj6SelectItemsCommandDisabled = false;
            private static bool isobj6DeselectItemsCommandDisabled = false;
            private static bool isobj6SelectRangesCommandDisabled = false;
            private static bool isobj6DeleteCommandDisabled = false;

            private OrdersFilterPanel_obj1_BindingsTracking bindingsTracking;

            public OrdersFilterPanel_obj1_Bindings()
            {
                this.bindingsTracking = new OrdersFilterPanel_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 42 && columnNumber == 24)
                {
                    isobj6ItemsSourceDisabled = true;
                }
                else if (lineNumber == 45 && columnNumber == 24)
                {
                    isobj6SelectedItemDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 24)
                {
                    isobj6IsMultipleSelectionDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 24)
                {
                    isobj6IsExtendedSelectionDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 24)
                {
                    isobj6ItemsCountDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 24)
                {
                    isobj6RefreshCommandDisabled = true;
                }
                else if (lineNumber == 52 && columnNumber == 24)
                {
                    isobj6QueryDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 24)
                {
                    isobj6QuerySubmittedCommandDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 24)
                {
                    isobj6StartSelectionCommandDisabled = true;
                }
                else if (lineNumber == 55 && columnNumber == 24)
                {
                    isobj6CancelSelectionCommandDisabled = true;
                }
                else if (lineNumber == 56 && columnNumber == 24)
                {
                    isobj6SelectItemsCommandDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 24)
                {
                    isobj6DeselectItemsCommandDisabled = true;
                }
                else if (lineNumber == 58 && columnNumber == 24)
                {
                    isobj6SelectRangesCommandDisabled = true;
                }
                else if (lineNumber == 59 && columnNumber == 24)
                {
                    isobj6DeleteCommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Views\Orders\OrdersFilterPanel.xaml line 40
                        this.obj6 = (global::Inventory.Controls.DataList)target;
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                throw new global::System.NotImplementedException();
            }

            public void Recycle()
            {
                throw new global::System.NotImplementedException();
            }

            // IOrdersFilterPanel_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Views.OrdersFilterPanel)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Views.OrdersFilterPanel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Inventory.ViewModels.OrdersFilterViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Items(obj.Items, phase);
                        this.Update_ViewModel_SelectedItem(obj.SelectedItem, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, phase);
                        this.Update_ViewModel_IsExtentedSelection(obj.IsExtentedSelection, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ItemsCount(obj.ItemsCount, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_RefreshCommand(obj.RefreshCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Query(obj.Query, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_StartSelectionCommand(obj.StartSelectionCommand, phase);
                        this.Update_ViewModel_CancelSelectionCommand(obj.CancelSelectionCommand, phase);
                        this.Update_ViewModel_SelectItemsCommand(obj.SelectItemsCommand, phase);
                        this.Update_ViewModel_DeselectItemsCommand(obj.DeselectItemsCommand, phase);
                        this.Update_ViewModel_SelectRangesCommand(obj.SelectRangesCommand, phase);
                        this.Update_ViewModel_DeleteSelectionCommand(obj.DeleteSelectionCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_Items(global::System.Collections.Generic.IList<global::Inventory.Models.OrderStatusModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_ItemsSource(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedItem(global::Inventory.Models.OrderStatusModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedItem(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectedItem(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsMultipleSelection(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6IsMultipleSelectionDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_IsMultipleSelection(this.obj6, obj);
                    }
                }
            }
            private void Update_ViewModel_IsExtentedSelection(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6IsExtendedSelectionDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_IsExtendedSelection(this.obj6, obj);
                    }
                }
            }
            private void Update_ViewModel_ItemsCount(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6ItemsCountDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_ItemsCount(this.obj6, obj);
                    }
                }
            }
            private void Update_ViewModel_RefreshCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6RefreshCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_RefreshCommand(this.obj6, obj, null);
                    }
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6QuerySubmittedCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_QuerySubmittedCommand(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Query(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6QueryDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_Query(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_StartSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6StartSelectionCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_StartSelectionCommand(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CancelSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6CancelSelectionCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_CancelSelectionCommand(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectItemsCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6SelectItemsCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectItemsCommand(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeselectItemsCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6DeselectItemsCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_DeselectItemsCommand(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectRangesCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6SelectRangesCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectRangesCommand(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeleteSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Orders\OrdersFilterPanel.xaml line 40
                    if (!isobj6DeleteCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_DeleteCommand(this.obj6, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_6_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedItem = (global::Inventory.Models.OrderStatusModel)this.obj6.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_6_Query()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Query = this.obj6.Query;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class OrdersFilterPanel_obj1_BindingsTracking
            {
                private global::System.WeakReference<OrdersFilterPanel_obj1_Bindings> weakRefToBindingObj; 

                public OrdersFilterPanel_obj1_BindingsTracking(OrdersFilterPanel_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<OrdersFilterPanel_obj1_Bindings>(obj);
                }

                public OrdersFilterPanel_obj1_Bindings TryGetBindingObject()
                {
                    OrdersFilterPanel_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_SelectedItem(null);
                }

                public void DependencyPropertyChanged_ViewModel(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    OrdersFilterPanel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Views.OrdersFilterPanel obj = sender as global::Inventory.Views.OrdersFilterPanel;
                        if (obj != null)
                        {
                            bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_ViewModel = 0;
                public void UpdateChildListeners_(global::Inventory.Views.OrdersFilterPanel obj)
                {
                    OrdersFilterPanel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Views.OrdersFilterPanel.ViewModelProperty, tokenDPC_ViewModel);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_ViewModel = obj.RegisterPropertyChangedCallback(global::Inventory.Views.OrdersFilterPanel.ViewModelProperty, DependencyPropertyChanged_ViewModel);
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    OrdersFilterPanel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.OrdersFilterViewModel obj = sender as global::Inventory.ViewModels.OrdersFilterViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                bindings.Update_ViewModel_ItemsCount(obj.ItemsCount, DATA_CHANGED);
                                bindings.Update_ViewModel_Query(obj.Query, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Items":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ItemsCount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ItemsCount(obj.ItemsCount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Query":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Query(obj.Query, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.OrdersFilterViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Inventory.ViewModels.OrdersFilterViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedItem(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    OrdersFilterPanel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Models.OrderStatusModel obj = sender as global::Inventory.Models.OrderStatusModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.Models.OrderStatusModel cache_ViewModel_SelectedItem = null;
                public void UpdateChildListeners_ViewModel_SelectedItem(global::Inventory.Models.OrderStatusModel obj)
                {
                    if (obj != cache_ViewModel_SelectedItem)
                    {
                        if (cache_ViewModel_SelectedItem != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedItem).PropertyChanged -= PropertyChanged_ViewModel_SelectedItem;
                            cache_ViewModel_SelectedItem = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedItem = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedItem;
                        }
                    }
                }
                public void RegisterTwoWayListener_6(global::Inventory.Controls.DataList sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_SelectedItem();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.QueryProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_Query();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 6: // Views\Orders\OrdersFilterPanel.xaml line 40
                {
                    this.orderStatusList = (global::Inventory.Controls.DataList)(target);
                    ((global::Inventory.Controls.DataList)this.orderStatusList).Loading += this.OrderStatusList_Loading;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Orders\OrdersFilterPanel.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    OrdersFilterPanel_obj1_Bindings bindings = new OrdersFilterPanel_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 2: // Views\Orders\OrdersFilterPanel.xaml line 24
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element2 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    OrdersFilterPanel_obj2_Bindings bindings = new OrdersFilterPanel_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element2.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element2, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

